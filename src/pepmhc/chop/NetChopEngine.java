
package pepmhc.chop;

import java.util.List;
import java.util.ArrayList;

import jam.lang.JamException;
import jam.math.Probability;
import jam.math.UnitIndex;
import jam.math.UnitIndexRange;

import jene.peptide.Peptide;

/**
 * Runs the {@code netchop} executable for a single peptide to
 * compute cleavage probabilities at each site in the peptide.
 */
public final class NetChopEngine {
    private final Peptide peptide;
    private final List<Probability> scores;

    private NetChopEngine(Peptide peptide) {
        this.peptide = peptide;
        this.scores  = NetChopRunner.score(peptide);
    }

    /**
     * Runs the {@code netchop} executable for a single peptide to
     * compute cleavage probabilities at each site in the peptide.
     *
     * @param peptide the peptide to score.
     *
     * @return an engine object containing the cleavage probability
     * scores for each site in the input peptide.
     */
    public static NetChopEngine run(Peptide peptide) {
        return new NetChopEngine(peptide);
    }

    /**
     * Generates peptide fragments of a particular length that are
     * likely to be products of proteasomal cleavage.
     *
     * @param fragLen the length of the peptide fragments to generate.
     *
     * @param threshold the minumum cleavage probability to require
     * for cleavage sites.
     *
     * @return the likely products of proteasomal cleavage having the
     * specified length.
     *
     * @throws RuntimeException unless the length is positive.
     */
    public List<Peptide> chop(int fragLen, Probability threshold) {
        List<Peptide> fragList = new ArrayList<Peptide>();
        UnitIndexRange fragRange = UnitIndexRange.first(fragLen);

        while (peptide.contains(fragRange)) {
            if (isCleavageFragment(fragRange, threshold))
                fragList.add(peptide.fragment(fragRange));

            fragRange = fragRange.shift(1);
        }

        return fragList;
    }

    /**
     * Returns the probability that a particular peptide fragment is
     * generated by proteasomal cleavage of the original peptide.
     *
     * @param fragment the peptide fragment range {@code [nterm, cterm]},
     * where {@code nterm} and {@code cterm} are the locations of the
     * N-terminus and C-terminus, respectively.
     *
     * @return the probability that the peptide fragment at positions
     * {@code [nterm, cterm]} is generated by proteasomal cleavage of
     * the original peptide.
     *
     * @throws RuntimeException if the C-terminus lies beyond the end
     * of the original peptide.
     */
    public Probability computeCleavageProb(UnitIndexRange fragment) {
        return computeCleavageProb(fragment.lower(), fragment.upper());
    }

    /**
     * Returns the probability that a particular peptide fragment is
     * generated by proteasomal cleavage of the original peptide.
     *
     * @param nterm the N-terminus (left-hand end) of the cleaved
     * peptide fragment.
     *
     * @param cterm the C-terminus (right-hand end) of the cleaved
     * peptide fragment.
     *
     * @return the probability that the peptide fragment at positions
     * {@code [nterm, cterm]} is generated by proteasomal cleavage of
     * the original peptide.
     *
     * @throws RuntimeException if the N-terminus lies to the right of
     * the C-terminus or if the C-terminus lies beyond the end of the
     * original peptide.
     */
    public Probability computeCleavageProb(UnitIndex nterm, UnitIndex cterm) {
        if (nterm.GT(cterm))
            throw JamException.runtime("Invalid peptide fragment: [%s, %s].", nterm, cterm);
        else
            return getNTerminusCleavageProb(nterm).and(getCTerminusCleavageProb(cterm));
    }

    /**
     * Returns the probability that the original peptide is cleaved
     * immediately after a particular residue.
     *
     * @param cterm the C-terminus (right-hand end) of the cleaved
     * peptide.
     *
     * @return the probability that the original peptide is cleaved
     * immediately after the residue at position {@code cterm}.
     *
     * @throws RuntimeException if the C-terminus lies beyond the end
     * of the original peptide.
     */
    public Probability getCTerminusCleavageProb(UnitIndex cterm) {
        return cterm.get(scores);
    }

    /**
     * Returns the probability that the original peptide is cleaved
     * immediately before a particular residue.
     *
     * @param nterm the N-terminus (left-hand end) of the cleaved
     * peptide.
     *
     * @return the probability that the original peptide is cleaved
     * immediately before the residue at position {@code nterm}.
     */
    public Probability getNTerminusCleavageProb(UnitIndex nterm) {
        if (nterm.isFirst())
            return Probability.ONE;
        else
            return getCTerminusCleavageProb(nterm.prev());
    }

    /**
     * Returns the original peptide.
     *
     * @return the original peptide.
     */
    public Peptide getOriginalPeptide() {
        return peptide;
    }

    /**
     * Identifies cleavage fragments.
     *
     * @param fragment the peptide fragment range {@code [nterm, cterm]},
     * where {@code nterm} and {@code cterm} are the locations of the
     * N-terminus and C-terminus, respectively.
     *
     * @param threshold the minumum cleavage probability required to
     * classify a location as a cleavage site.
     *
     * @return {@code true} iff the cleavage probabilities at the
     * C-terminus and the location to the left of the N-terminus
     * are equal to or greater than the threshold.
     */
    public boolean isCleavageFragment(UnitIndexRange fragment, Probability threshold) {
        return isCleavageFragment(fragment.lower(), fragment.upper(), threshold);
    }

    /**
     * Identifies cleavage fragments.
     *
     * @param nterm the N-terminus (left-hand end) of the cleaved
     * peptide fragment.
     *
     * @param cterm the C-terminus (right-hand end) of the cleaved
     * peptide fragment.
     *
     * @param threshold the minumum cleavage probability required to
     * classify a location as a cleavage site.
     *
     * @return {@code true} iff the cleavage probabilities at the
     * C-terminus and the location to the left of the N-terminus
     * are equal to or greater than the threshold.
     */
    public boolean isCleavageFragment(UnitIndex nterm, UnitIndex cterm, Probability threshold) {
        return isNTerminusCleavageSite(nterm, threshold) && isCTerminusCleavageSite(cterm, threshold);
    }

    /**
     * Identifies C-terminus cleavage sites.
     *
     * @param cterm the C-terminus (right-hand end) of the cleaved
     * peptide.
     *
     * @param threshold the minumum cleavage probability required to
     * classify a location as a cleavage site.
     *
     * @return {@code true} iff the cleavage probability at the given
     * C-terminus is equal to or greater than the threshold.
     */
    public boolean isCTerminusCleavageSite(UnitIndex cterm, Probability threshold) {
        return peptide.contains(cterm) && getCTerminusCleavageProb(cterm).GE(threshold);
    }

    /**
     * Identifies N-terminus cleavage sites.
     *
     * @param nterm the N-terminus (left-hand end) of the cleaved
     * peptide.
     *
     * @param threshold the minumum cleavage probability required to
     * classify a location as a cleavage site.
     *
     * @return {@code true} iff the cleavage probability at the given
     * N-terminus is equal to or greater than the threshold.
     */
    public boolean isNTerminusCleavageSite(UnitIndex nterm, Probability threshold) {
        return peptide.contains(nterm) && getNTerminusCleavageProb(nterm).GE(threshold);
    }
}


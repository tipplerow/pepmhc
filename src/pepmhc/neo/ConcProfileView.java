
package pepmhc.neo;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;

import jam.chem.Concentration;
import jam.hla.PeptideSource;
import jam.hugo.HugoPeptideTable;
import jam.hugo.HugoSymbol;
import jam.peptide.Peptide;
import jam.peptide.PeptideConcentrationBuilder;
import jam.peptide.PeptideConcentrationProfile;
import jam.rna.ConcentrationModel;
import jam.rna.Expression;
import jam.rna.ExpressionProfile;

/**
 * Stores neo-peptide and self-peptide concentration profiles together
 * in a single object with read-only access.
 */
public final class ConcProfileView {
    private final PeptideConcentrationProfile neoProfile;
    private final PeptideConcentrationProfile selfProfile;

    private ConcProfileView(PeptideConcentrationProfile neoProfile,
                            PeptideConcentrationProfile selfProfile) {
        this.neoProfile = neoProfile;
        this.selfProfile = selfProfile;
    }

    /**
     * The single empty profile view.
     */
    public static final ConcProfileView EMPTY =
        create(PeptideConcentrationProfile.EMPTY,
               PeptideConcentrationProfile.EMPTY);

    /**
     * Builds neo-peptide and self-peptide concentration profiles
     * from RNA expression data.
     *
     * @param peptideSource the neo-peptides and self-peptides
     * generated by antigen processing of mutated and germline
     * proteins.
     *
     * @param expressionProfile RNA expression indexed by gene.
     *
     * @param concentrationModel the model that translates RNA
     * expression into peptide concentration.
     *
     * @return the protein concentration profiles derived from the
     * given expression profile.
     */
    public static ConcProfileView build(PeptideSourceView peptideSource,
                                        ExpressionProfile expressionProfile,
                                        ConcentrationModel concentrationModel) {
        PeptideConcentrationBuilder neoBuilder = PeptideConcentrationBuilder.create();
        PeptideConcentrationBuilder selfBuilder = PeptideConcentrationBuilder.create();

        for (Map.Entry<HugoSymbol, Expression> entry : expressionProfile.viewEntries()) {
            HugoSymbol symbol = entry.getKey();
            Expression expression = entry.getValue();
            Concentration concentration = concentrationModel.translate(expression);

            if (!concentration.isPositive())
                continue;

            Collection<Peptide> neoPeptides = peptideSource.getNeoPeptides(symbol);
            Collection<Peptide> selfPeptides = peptideSource.getSelfPeptides(symbol);

            neoBuilder.addAll(neoPeptides, concentration);
            selfBuilder.addAll(selfPeptides, concentration);
        }

        PeptideConcentrationProfile neoProfile = neoBuilder.build();
        PeptideConcentrationProfile selfProfile = selfBuilder.build();

        return create(neoProfile, selfProfile);
    }

    /**
     * Creates a new concentration profile view from its constituent
     * profiles.
     *
     * @param neoProfile the concentration profile of neo-peptides.
     *
     * @param selfProfile the concentration profile of self-peptides.
     *
     * @return the new concentration profile view.
     */
    public static ConcProfileView create(PeptideConcentrationProfile neoProfile,
                                         PeptideConcentrationProfile selfProfile) {
        return new ConcProfileView(neoProfile, selfProfile);
    }

    /**
     * Returns a list containing all peptides (<em>neo</em> and
     * <em>self</em>) in the concentration profiles.
     *
     * @return a list containing all peptides in the concentration
     * profiles.
     */
    public List<Peptide> allPeptides() {
        List<Peptide> allPeptides = new ArrayList<Peptide>();

        allPeptides.addAll(neoProfile.viewPeptides());
        allPeptides.addAll(selfProfile.viewPeptides());

        return allPeptides;
    }

    /**
     * Returns the concentration profile for a given peptide source
     * type.
     *
     * @param source the peptide type: "neo" or "self".
     *
     * @return the concentration profile for peptides of the specified
     * type.
     */
    public PeptideConcentrationProfile getProfile(PeptideSource source) {
        switch (source) {
        case NEO:
            return neoProfile;

        case SELF:
            return selfProfile;

        default:
            throw new IllegalStateException("Unsupported peptide source.");
        }
    }

    /**
     * Returns the neo-peptide concentration profile.
     *
     * @return the neo-peptide concentration profile.
     */
    public PeptideConcentrationProfile getNeoProfile() {
        return neoProfile;
    }

    /**
     * Returns the self-peptide concentration profile.
     *
     * @return the self-peptide concentration profile.
     */
    public PeptideConcentrationProfile getSelfProfile() {
        return selfProfile;
    }
}

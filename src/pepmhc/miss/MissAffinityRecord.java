
package pepmhc.miss;

import java.util.Comparator;

import jam.io.Delimiter;
import jam.math.Percentile;
import jam.report.LineBuilder;

import jene.hla.Allele;
import jene.hugo.HugoSymbol;
import jene.tcga.TumorBarcode;
import jene.tcga.TumorGeneRecord;

import pepmhc.affy.Affinity;

/**
 * Associates a missense mutation with the neo-peptide that it
 * produces, the probability that the neo-peptide peptide will
 * be generated by proteasomal cleavage, and the MHC binding
 * affinity of the neo-peptide to a specific HLA allele.
 */
public final class MissAffinityRecord implements TumorGeneRecord {
    private final MissCleavageRecord cleavageRec;

    private final Allele allele;

    private final Affinity neoAffinity;
    private final Affinity selfAffinity;

    private final Percentile neoAffinityRank;
    private final Percentile selfAffinityRank;

    private MissAffinityRecord(MissCleavageRecord cleavageRec,
                               Allele allele,
                               Affinity neoAffinity,
                               Affinity selfAffinity,
                               Percentile neoAffinityRank,
                               Percentile selfAffinityRank) {
        this.cleavageRec= cleavageRec;

        this.allele = allele;

        this.neoAffinity = neoAffinity;
        this.selfAffinity = selfAffinity;

        this.neoAffinityRank = neoAffinityRank;
        this.selfAffinityRank = selfAffinityRank;
    }

    /**
     * The standard delimiter for flat files containing affinity
     * records.
     */
    public static final Delimiter DELIM = Delimiter.TAB;

    /**
     * A comparator that orders records by tumor barcode first, HUGO
     * symbol second, and neo-peptide mutation position third.
     */
    public static final Comparator<MissAffinityRecord> COMPARATOR =
        new Comparator<MissAffinityRecord>() {
            @Override public int compare(MissAffinityRecord rec1, MissAffinityRecord rec2) {
                int cleavageCmp = MissCleavageRecord.COMPARATOR.compare(rec1.cleavageRec, rec2.cleavageRec);

                if (cleavageCmp != 0)
                    return cleavageCmp;
                else
                    return rec1.allele.compareTo(rec2.allele);
            }
        };

    /**
     * Returns an affinity record with fixed components.
     *
     * @param cleavageRec the cleavage record containing the
     * neo-peptide and self-peptide.
     *
     * @param allele the HLA allele.
     *
     * @param neoAffinity the neo-peptide binding affinity.
     *
     * @param selfAffinity the self-peptide binding affinity.
     *
     * @param neoAffinityRank the percentile rank of the neo-peptide
     * binding affinity.
     *
     * @param selfAffinityRank the percentile rank of the self-peptide
     * binding affinity.
     *
     * @return the affinity record with the specified components.
     */
    public static MissAffinityRecord create(MissCleavageRecord cleavageRec,
                                            Allele allele,
                                            Affinity neoAffinity,
                                            Affinity selfAffinity,
                                            Percentile neoAffinityRank,
                                            Percentile selfAffinityRank) {
        return new MissAffinityRecord(cleavageRec,
                                      allele,
                                      neoAffinity,
                                      selfAffinity,
                                      neoAffinityRank,
                                      selfAffinityRank);
    }

    /**
     * Returns the header line for flat files containing affinity
     * records.
     *
     * @return the header line for flat files containing affinity
     * records.
     */
    public static String header() {
        LineBuilder builder = new LineBuilder(DELIM);

        builder.append(MissCleavageRecord.header(DELIM));
        builder.append("Allele");
        builder.append("Neo_Affinity");
        builder.append("Self_Affinity");
        builder.append("Neo_Affinity_Rank");
        builder.append("Self_Affinity_Rank");

        return builder.toString();
    }

    /**
     * Creates a new affinity record by parsing a delimited line from
     * a flat file.
     *
     * @param line the line to parse.
     *
     * @return the affinity record encoded in the specified line.
     *
     * @throws RuntimeException unless the line contains a properly
     * formatted affinity record.
     */
    public static MissAffinityRecord parse(String line) {
        String[] fields = DELIM.split(line, 15);

        MissCleavageRecord cleavageRec =
            MissCleavageRecord.parse(fields, 0);

        Allele allele = Allele.instance(fields[10]);
        Affinity neoAffinity = Affinity.parse(fields[11]);
        Affinity selfAffinity = Affinity.parse(fields[12]);
        Percentile neoAffinityRank = Percentile.parse(fields[13]);
        Percentile selfAffinityRank = Percentile.parse(fields[14]);

        return create(cleavageRec,
                      allele,
                      neoAffinity,
                      selfAffinity,
                      neoAffinityRank,
                      selfAffinityRank);
    }

    /**
     * Formats this record for output to a delimited flat file.
     *
     * @return a string containing the formatted text.
     */
    public String format() {
        LineBuilder builder = new LineBuilder(DELIM);

        builder.append(cleavageRec.format(DELIM));
        builder.append(allele.shortKey());
        builder.append(neoAffinity.doubleValue(), "%.2f");
        builder.append(selfAffinity.doubleValue(), "%.2f");
        builder.append(neoAffinityRank.doubleValue(), "%.2f");
        builder.append(selfAffinityRank.doubleValue(), "%.2f");

        return builder.toString();
    }

    /**
     * Returns the parent cleavage record.
     *
     * @return the parent cleavage record.
     */
    public MissCleavageRecord getCleavageRecord() {
        return cleavageRec;
    }

    /**
     * Returns the HLA allele. 
     *
     * @return the HLA allele.
     */
    public Allele getAllele() {
        return allele;
    }

    /**
     * Returns the neo-peptide binding affinity.
     *
     * @return the neo-peptide binding affinity.
     */
    public Affinity getNeoAffinity() {
        return neoAffinity;
    }

    /**
     * Returns the self-peptide binding affinity.
     *
     * @return the self-peptide binding affinity.
     */
    public Affinity getSelfAffinity() {
        return selfAffinity;
    }

    /**
     * Returns the percentile rank for the neo-peptide binding
     * affinity.
     *
     * @return the percentile rank for the neo-peptide binding
     * affinity.
     */
    public Percentile getNeoAffinityRank() {
        return neoAffinityRank;
    }

    /**
     * Returns the percentile rank for the self-peptide binding
     * affinity.
     *
     * @return the percentile rank for the self-peptide binding
     * affinity.
     */
    public Percentile getSelfAffinityRank() {
        return selfAffinityRank;
    }

    @Override public HugoSymbol getHugoSymbol() {
        return cleavageRec.getHugoSymbol();
    }

    @Override public TumorBarcode getTumorBarcode() {
        return cleavageRec.getTumorBarcode();
    }

    @Override public String toString() {
        LineBuilder builder = new LineBuilder("\n");

        builder.append("MissAffinityRecord:");
        builder.append(cleavageRec.toString());
        builder.append("  allele           = " + allele);
        builder.append("  neoAffinity      = " + neoAffinity);
        builder.append("  selfAffinity     = " + selfAffinity);
        builder.append("  neoAffinityRank  = " + neoAffinityRank);
        builder.append("  selfAffinityRank = " + selfAffinityRank);

        return builder.toString();
    }
}
